apiVersion: v1
kind: Template
metadata:
  name: ${APP_NAME}-template

objects:
  # Service
  # Acts as a reverse proxy for our Pods. Adds/removes pods as needed to the service based on labels.
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${APP_NAME}
      labels:
        app: ${APP_NAME}
    spec:
      ports:
        - name: 8080-tcp
          protocol: TCP
          port: 8080
          targetPort: 8080
      selector:
        app: ${APP_NAME}
        deploymentconfig: ${APP_NAME}
      sessionAffinity: None

  # Route
  # Exposes the service to a particular endpoint DNS
  - kind: Route
    apiVersion: v1
    metadata:
      name: ${APP_NAME}
      namespace: ${PROJECT_NAME}
      labels:
        app: ${APP_NAME}
    spec:
      host: "${APP_NAME}-${PROJECT_NAME}.${DOMAIN}"
      to:
        kind: Service
        name: ${APP_NAME}
        weight: 100
      port:
        targetPort: 8080-tcp
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
      wildcardPolicy: None

  # ImageStream
  # Performs automated actions based on one or more docker image tags
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${APP_NAME}
      namespace: ${PROJECT_NAME}
    spec:
      dockerImageRepository: ${DOCKER_REPO}
      tags:
        -
          name: latest
          from:
            kind: DockerImage
            name: "${DOCKER_REPO}:latest"
      importPolicy:
        insecure: true

  # Deployment
  # Configures when and how deployments of the app take place
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${APP_NAME}
      namespace: ${PROJECT_NAME}
      labels:
        app: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        app: ${APP_NAME}
        deploymentconfig: ${APP_NAME}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            app: ${APP_NAME}
            deploymentconfig: ${APP_NAME}
        spec:
          containers:
            - name: ${APP_NAME}
              image: "${DOCKER_REPO}:latest"
              ports:
                - containerPort: 8080
                  protocol: TCP
              imagePullPolicy: Always
              resources:
                limits:
                  cpu: "2"
                  memory: 2Gi
                requests:
                  cpu: 250m
                  memory: 768Mi
        triggers:
          - type: ConfigChange
          - type: ImageChange
            imageChangeParams:
              automatic: true
              containerNames:
                - ${APP_NAME}
              from:
                kind: ImageStreamTag
                namespace: ${PROJECT_NAME}
                name: "${APP_NAME}:latest"

parameters:
  - name: PROJECT_NAME
    description: "The project namespace to create resources in"
  - name: APP_NAME
    description: "The app name to assign to resources"
  - name: DOCKER_REPO
    description: "The Docker Registry to use for the image stream"
  - name: DOMAIN
    description: "Domain for application routes (defaults to wildcard DNS pointing to localhost)"
    value: "127.0.0.1.nip.io"
